--- /sdcard/Download/llvm_android/builders.py	2020-11-14 20:16:18.718687555 +0800
+++ llvm_android/builders.py	2020-11-28 14:12:24.664852428 +0800
@@ -62,6 +62,7 @@
 
 class Stage1Builder(base_builders.LLVMBuilder):
     name: str = 'stage1'
+    # stage1 install directory
     install_dir: Path = paths.OUT_DIR / 'stage1-install'
     build_android_targets: bool = False
     config_list: List[configs.Config] = [configs.host_config()]
@@ -87,7 +88,7 @@
         # avoids specifying self.toolchain.lib_dir in rpath to find libc++ at
         # runtime.
         # [1] libc++ in our case, despite the flag saying -static-libstdc++.
-        ldflags.append('-static-libstdc++')
+        ldflags.append('-static-libstdc++ -ldl -lc++')
         return ldflags
 
     @property
@@ -135,7 +136,7 @@
 
     @property
     def llvm_projects(self) -> Set[str]:
-        proj = {'clang', 'lld', 'libcxxabi', 'libcxx', 'compiler-rt',
+        proj = {'clang', 'lld', 'libcxxabi', 'libcxx', 'libunwind', 'compiler-rt',
                 'clang-tools-extra', 'openmp', 'polly'}
         if self.build_lldb:
             proj.add('lldb')
@@ -154,6 +155,7 @@
     @property
     def ldflags(self) -> List[str]:
         ldflags = super().ldflags
+        ldflags.append('-static-libstdc++ -ldl -lc++')
         if self.build_instrumented:
             # Building libcxx, libcxxabi with instrumentation causes linker errors
             # because these are built with -nodefaultlibs and prevent libc symbols
@@ -293,7 +295,8 @@
         sarch = 'i686' if arch == hosts.Arch.I386 else arch.value
         static_lib_filename = 'libclang_rt.fuzzer-' + sarch + '-android.a'
 
-        lib_dir = self.install_dir / 'lib' / 'linux'
+        #lib_dir = self.install_dir / 'lib' / 'linux'
+        lib_dir = self.install_dir / 'lib' / 'android'
         arch_dir = lib_dir / arch.value
         arch_dir.mkdir(parents=True, exist_ok=True)
         shutil.copy2(lib_dir / static_lib_filename, arch_dir / 'libFuzzer.a')
@@ -360,6 +363,49 @@
         super()._build_config()
 
 
+class CompilerRTHostAarch64Builder(base_builders.LLVMRuntimeBuilder):
+    name: str = 'compiler-rt-aarch64-host'
+    src_dir: Path = paths.LLVM_PATH / 'compiler-rt'
+    config_list: List[configs.Config] = [configs.LinuxConfig(is_32_bit=False)]
+
+    @property
+    def install_dir(self) -> Path:
+        return self.output_toolchain.clang_lib_dir
+
+    @property
+    def cmake_defines(self) -> Dict[str, str]:
+        defines = super().cmake_defines
+        # Due to CMake and Clang oddities, we need to explicitly set
+        # CMAKE_C_COMPILER_TARGET and use march=i686 in cflags below instead of
+        # relying on auto-detection from the Compiler-rt CMake files.
+        defines['CMAKE_C_COMPILER_TARGET'] = 'aarch64-linux-android'
+        defines['COMPILER_RT_INCLUDE_TESTS'] = 'ON'
+        defines['COMPILER_RT_ENABLE_WERROR'] = 'ON'
+        defines['SANITIZER_CXX_ABI'] = 'libstdc++'
+        return defines
+
+    @property
+    def cflags(self) -> List[str]:
+        cflags = super().cflags
+        # compiler-rt/lib/gwp_asan uses PRIu64 and similar format-specifier macros.
+        # Add __STDC_FORMAT_MACROS so their definition gets included from
+        # inttypes.h.  This explicit flag is only needed here.  64-bit host runtimes
+        # are built in stage1/stage2 and get it from the LLVM CMake configuration.
+        # These are defined unconditionaly in bionic and newer glibc
+        # (https://sourceware.org/git/gitweb.cgi?p=glibc.git;h=1ef74943ce2f114c78b215af57c2ccc72ccdb0b7)
+        cflags.append('-D__STDC_FORMAT_MACROS')
+        cflags.append('--target=aarch64-linux-android29')
+        cflags.append('-march=armv8-a')
+        return cflags
+
+    def _build_config(self) -> None:
+        # Also remove the "stamps" created for the libcxx included in libfuzzer so
+        # CMake runs the configure again (after the cmake caches are deleted).
+        stamp_path = self.output_dir / 'lib' / 'fuzzer' / 'libcxx_fuzzer_aarch64-stamps'
+        if stamp_path.exists():
+            shutil.rmtree(stamp_path)
+        super()._build_config()
+
 class LibOMPBuilder(base_builders.LLVMRuntimeBuilder):
     name: str = 'libomp'
     src_dir: Path = paths.LLVM_PATH / 'openmp'
@@ -369,6 +415,12 @@
         configs.android_configs(platform=False, extra_config={'is_shared': False}) +
         configs.android_configs(platform=False, extra_config={'is_shared': True})
     )
+    
+    @property
+    def ldflags(self) -> List[str]:
+        ldflags = super().ldflags
+        ldflags.append('-fopenmp')
+        return ldflags
 
     @property
     def is_shared(self) -> bool:
@@ -384,6 +436,7 @@
     def cmake_defines(self) -> Dict[str, str]:
         defines = super().cmake_defines
         defines['CMAKE_POSITION_INDEPENDENT_CODE'] = 'ON'
+        defines['LIBOMP_USE_VERSION_SYMBOLS'] = 'OFF'
         defines['OPENMP_ENABLE_LIBOMPTARGET'] = 'FALSE'
         defines['OPENMP_ENABLE_OMPT_TOOLS'] = 'FALSE'
         defines['LIBOMP_ENABLE_SHARED'] = 'TRUE' if self.is_shared else 'FALSE'
@@ -406,6 +459,21 @@
     src_dir: Path = paths.LIBEDIT_SRC_DIR
     config_list: List[configs.Config] = [configs.host_config()]
 
+    # setting ncurse pathname
+    ncurses_dir: Path = paths.NCURSES_DIR
+    
+    @property
+    def cflags(self) -> List[str]:
+        cflags = super().cflags
+        cflags.append(f'-I{self.ncurses_dir}/include')
+        return cflags
+        
+    @property
+    def ldflags(self) -> List[str]:
+        ldflags = super().ldflags
+        ldflags.append(f'-L{self.ncurses_dir}/lib')
+        return ldflags
+    
     def install(self) -> None:
         super().install()
         if self._config.target_os.is_darwin:
@@ -811,7 +879,8 @@
             # Use static-libgcc to avoid runtime dependence on libgcc_eh.
             ldflags.append('-static-libgcc')
             # pthread is needed by libgcc_eh.
-            ldflags.append('-pthread')
+            # build on android is no need pthread
+            #ldflags.append('-pthread')
 
             ldflags.append('-Wl,--dynamicbase')
             ldflags.append('-Wl,--nxcompat')
